[{"coursename":"Compiler Design","author":"Gatesmashers","image":"https://i.ytimg.com/vi/XUsw5igq4DM/hqdefault.jpg?sqp=-oaymwEXCNACELwBSFryq4qpAwkIARUAAIhCGAE=&rs=AOn4CLBTARiOBUMd8jHPHyM0_pQgp_EuLg","link":"https://www.youtube.com/playlist?list=PLxCzCOWd7aiEKtKSIHYusizkESC42diyc","description":"In this course there is detailed discussion on important topics of Compiler Design for competitive exams like NTA NET, NIELIT scientist and other PSUs as well as college, university exams and placements also. All points discussed in this series of Compiler design are beneficial and notable."},
{"coursename":"Compiler Design","author":"Neso Academy","image":"https://i.ytimg.com/vi/5ZmFlxrNaN8/hqdefault.jpg?sqp=-oaymwEXCNACELwBSFryq4qpAwkIARUAAIhCGAE=&rs=AOn4CLB9L2Inl0ivqgwwAtW4yjnWwSawlg","link":"https://www.youtube.com/playlist?list=PLBlnK6fEyqRjT3oJxFXRgjPNzeS-LFY-q","description":"Compiler Design is the structure and set of principles that guide the translation, analysis, and optimization process of a compiler. A Compiler is computer software that transforms program source code that is written in a high-level language into low-level machine code. "},
{"coursename":"Compiler Design","author":"IIT Kharagpur","image":"https://i.ytimg.com/vi/_ck1Lnm28hQ/hqdefault.jpg?sqp=-oaymwEXCNACELwBSFryq4qpAwkIARUAAIhCGAE=&rs=AOn4CLCCtcWDedqyLZ1HlbGLuuZx--dv-A","link":"https://onlinecourses.nptel.ac.in/noc20_cs13/preview","description":"Compilers have become part and parcel of today's computer systems. They are responsible for making the user’s computing requirements, specified as a piece of program, understandable to the underlying machine. There tools work as interface between the entities of two different domains – the human being and the machine. The actual process involved in this transformation is quite complex."},
{"coursename":"Compiler Design","author":"Standford","image":"https://online.stanford.edu/sites/default/files/styles/widescreen_large/public/2018-03/engineering-computer-science-compilers_soe-ycscs1.jpg?h=ae1281eb&itok=lKbWgfVV","link":"https://online.stanford.edu/courses/soe-ycscs1-compilers","description":"This self-paced course will discuss the major ideas used today in the implementation of programming language compilers, including lexical analysis, parsing, syntax-directed translation, abstract syntax trees, types and type checking, intermediate languages, dataflow analysis, program optimization, code generation, and runtime systems. As a result, you will learn how a program written in a high-level language designed for humans is systematically translated into a program written in low-level assembly more suited to machines. Along the way we will also touch on how programming languages are designed, programming language semantics, and why there are so many different kinds of programming languages."},
{"coursename":"Theory of computation","author":"Gatesmashers","image":"https://i.ytimg.com/vi/XslI8h7cGDs/hqdefault.jpg?sqp=-oaymwEbCKgBEF5IVfKriqkDDggBFQAAiEIYAXABwAEG&rs=AOn4CLA0U_nPlnvgFeCX51u58OqfQkW0EQ","link":"https://www.youtube.com/playlist?list=PLxCzCOWd7aiFM9Lj5G9G_76adtyb4ef7i","description":"This video introduces the outline of computability and computational complexity theory. Topics include regular and context free grammar, finite and pushdown automata, turing machine, decidable and undecidable problems. It is important for competitive exams like UGC NET, GATE, NIELIT scientist and other PSUs as well as college, university exams and placements, interviews also."},
{"coursename":"Theory of computation","author":"IIT Khanpur","image":"https://i.ytimg.com/vi_webp/77nkSUsQqJk/maxresdefault.webp","link":"https://onlinecourses.nptel.ac.in/noc21_cs83/preview","description":"This is an introductory course on Theory of Computation intended for undergraduate students in computer science. In this course we will introduce various models of computation and study their power and limitations. We will also explore the properties of the corresponding language classes defined by these models and the relations between them. We will assume the student is comfortable in analytical reasoning and has preferably done a course on Data Structures and Algorithms."},
{"coursename":"Theory of computation","author":"Standford","image":"https://online.stanford.edu/sites/default/files/styles/widescreen_large/public/2018-03/cs_introtoautomataandcomplexitytheory_cs154.jpg?h=66807ab2&itok=0muzfnXm","link":"https://online.stanford.edu/courses/cs154-introduction-theory-computation","description":"In this introductory course on theory of computation, students will be asked to find solutions to several computational questions - ranging from how computation is defined to how problems can be efficiently solved through these models. Some of these questions can be answered completely and some questions lead to major open problems in computer science and mathematics today. By the end of this course, students will be able to classify computational problems in terms of their computational complexity. Students will also gain a deeper appreciation for some of the fundamental issues in computing that are independent of technology trends."},
{"coursename":"Theory of computation","author":"Neso Academy","image":"https://i.ytimg.com/vi/58N2N7zJGrQ/hqdefault.jpg?sqp=-oaymwEXCNACELwBSFryq4qpAwkIARUAAIhCGAE=&rs=AOn4CLDEQZ-ysWfU3hhY5H9ta_vrzwPSGA","link":"https://www.youtube.com/playlist?list=PLBlnK6fEyqRgp46KUv4ZY69yXmpwKOIev","description":"Theory of Computation is one of the most fundamental as well as abstract courses of Computer Science. It is a branch in theoretical Computer Science that deals with whether problems can be solved and how efficiently  problems can be solved on a model of computation, using an algorithm. The lectures in this series gives you an intuitive understanding of the course and helps you to understand deeper about designing machines, about the working of machines and much more and helps you understand it in a simple yet effective way."}
]